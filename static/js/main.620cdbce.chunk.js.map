{"version":3,"sources":["utils/placehold-text.js","components/InputPane.js","components/PreviewPane.js","App.js","utils/registerServiceWorker.js","index.js"],"names":["placeholdText","InputPane","props","react_default","a","createElement","className","value","inputText","onChange","PreviewPane","_ref","dangerouslySetInnerHTML","__html","marked","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleChange","e","setState","target","state","components_InputPane","components_PreviewPane","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gOAuDeA,eAvDI,60ECeJC,EAZG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,kCACAH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,mBAAmBC,MAAOL,EAAMM,UAAWC,SAAUP,EAAMO,6BCSpEC,EAXK,SAAAC,GAAA,IAAGH,EAAHG,EAAGH,UAAH,OAClBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,kCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBM,wBAAyB,CAAEC,OAAQC,IAAON,QC6BnEO,cA1Bb,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KAMRqB,cAAgB,SAACC,GACfR,EAAKS,SAAS,CACZjB,UAAWgB,EAAEE,OAAOnB,SAPtBS,EAAKW,MAAQ,CACXnB,UAAWR,GAHIgB,wEAcjB,OACEb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBACdH,EAAAC,EAAAC,cAACuB,EAAD,CACEnB,SAAUU,KAAKI,cACff,UAAWW,KAAKQ,MAAMnB,YAExBL,EAAAC,EAAAC,cAACwB,EAAD,CAAarB,UAAWW,KAAKQ,MAAMnB,oBArBzBsB,aCCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlB,QACfY,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCjEjEC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,eAAN,sBAEN5B,EAwCX,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAsB,CAAwBlC,GAHxBD,EAAgBC,MC9BxBmC","file":"static/js/main.620cdbce.chunk.js","sourcesContent":["const placeholdText = `# Lacrimis generis quaesita est\n\n## Ille pugnat dona velle\n\nLorem markdownum, cortice tantos praestem anguis aliquid Quirini est. Ait opaci\ninter, Dardanio paternum sperne *sentit haerent* reparabile ferunt! Tectas\nomnibus in ponit ulciscitur: orant et exiguo in furorem rogis: caput Melaneus\nconiuge.\n\n1. Quos damnum Iovis Helicona\n2. Tanto ut\n3. Et populos venerabile perque contulit ortos lupum\n\nSplendidaque tegumenque **palmas**. Natura manibusque cicuta quaeque petens et\nserpit tempora at tenentis, defensus utro non quis.\n\n## Et contigit pollicibusque genitum Apidani\n\nIlli sua suo [stimuletur stare suae](http://nec.org/) terret, hos de, et diebus:\nlumina nox. Di percussis datur oraque magis oves tenemus altam, conanti scite\npraestiteris tum perspicit concepit. Maior rates longe ignes clamat miratus, huc\nquod Iovis sororum amorem principiis, damnosasque,\n[Phaestia](http://www.frigida.net/augurio-ad)! Nam senex gaudet, mediisque\nlacerum habent evellere abest Interea, percipit! Enim **iste apte** ludit\nAchilles quantam ab reliquit imas.\n\n> *Unda labens tota*, ego [bis qui](http://sidesilit.com/ocior.php) adhuc\n> quereris pars inpius falcis ad tibi medias? Initis volucrem nec Tonantis nomen\n> olim ossaque suus rupit nam roganti, ulnis caudas ait?\n\nQuoniam quique, serpentigenis propiore sed in venit in videt modo trepidamque\nerat terrasque perque tollebat. Meum Aiax bucina etiamnunc flamma per bene\ndemens fuerant gradibus armataque futuri audaci experientia subit, dubitavit\nlitore vigebat.\n\n## Esse lutea\n\nMirata telo duxit: caput stetit et habendam tenui onus exclamat nocens non, es.\nEnodisque ignes comitum melius, Pan est Priamidenque quoque quorum; quod\npromissa quae pati, placato.\n\n- Pactolides solent deos non insequitur facit inesset\n- Anni fortibus parente laceras\n- Primum latus repetita\n- Tanti avsis et potiere auctor\n- Audiri acui gente neque torrem quid prima\n- Fugere incertae mortalem corpora mihi contigerat colentes\n\nForma me post infectum, labore, ad ab sortes posuere sequatur veneror. Nunc\natria multae, cadit, quae sonum negat. Locis mihi tamen Venus dolebo a silentum,\nserpentigenis dare acceptaque quae iactatis [excipit\nomnem](http://suscitat.com/est). Illo revertitur eburnea [negant\nfine](http://alemoniden.io/vos) adest sortite, crede; sua avido mortale metallis\nmortuaque.`;\n\nexport default placeholdText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputPane = props => (\n  <section className=\"input-pane\">\n    <h1 className=\"top-label\">&#8643; Replace Markdown &#8642;</h1>\n    <textarea className=\"input-pane__text\" value={props.inputText} onChange={props.onChange} />\n  </section>\n);\n\nInputPane.propTypes = {\n  inputText: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default InputPane;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\n\nconst PreviewPane = ({ inputText }) => (\n  <div className=\"preview-pane\">\n    <h1 className=\"top-label\">&#8643; Markdown Preview &#8642;</h1>\n    <div className=\"preview-pane__text\" dangerouslySetInnerHTML={{ __html: marked(inputText) }} />\n  </div>\n);\n\nPreviewPane.propTypes = {\n  inputText: PropTypes.string.isRequired\n};\n\nexport default PreviewPane;\n","import React, { Component } from 'react';\n\nimport 'normalize.css';\nimport './css/style.css';\nimport placeholdText from './utils/placehold-text';\n\nimport InputPane from './components/InputPane';\nimport PreviewPane from './components/PreviewPane';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: placeholdText\n    };\n  }\n\n  _handleChange = (e) => {\n    this.setState({\n      inputText: e.target.value\n    });\n  };\n\n  render() {\n    return (\n      <main className=\"app-container\">\n        <InputPane\n          onChange={this._handleChange}\n          inputText={this.state.inputText}\n        />\n        <PreviewPane inputText={this.state.inputText} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './utils/registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}